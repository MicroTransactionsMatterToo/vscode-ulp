{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Cadsoft/EAGLE ULP",
  "scopeName": "source.ulp",
  "patterns": [
    {
      "include": "#block-delimiters"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#dialog-object-constructor"
    },
    {
      "include": "#dialog-objects"
    },
    {
      "include": "#dialog-functions"
    },
    {
      "include": "#function-def"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#character-constant"
    },
    {
      "include": "#string-constant"
    },
    {
      "include": "#numeric-constant"
    },
    {
      "include": "#directive"
    },
    {
      "include": "#primitives"
    },
    {
      "include": "#line-comment"
    },
    {
      "include": "#block-comment"
    },
    {
      "include": "#ul-objects"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "line-comment": {
      "match": "//.*",
      "name": "comment.line.double-slash"
    },
    "block-comment": {
      "name": "comment.line.double-slash",
      "begin": "(?<!\\/)\\/\\*",
      "beginCaptures": {
        "0": {
          "name": "comment.begin.ulp"
        }
      },
      "end": "\\*\\/",
      "endCaptures": {
        "0": {
          "name": "comment.end.ulp"
        }
      }
    },
    "identifier": {
      "match": "[_a-zA-Z][_a-zA-Z0-9]*",
      "name": "variable.name"
    },
    "keywords": {
      "match": "\\b((?:for|if|else|do|while|break|case|continue|default|enum|for|return)|(switch))\\b",
      "captures": {
        "0": {
          "name": "keyword.control"
        },
        "2": {
          "name": "keyword.control.switch.ulp"
        }
      }
    },
    "primitives": {
      "match": "\\b(?:(int)|(real)|(char)|(string)|(enum)|(void))\\b",
      "captures": {
        "0": {
          "name": "storage.type"
        },
        "1": {
          "name": "storage.type.built-in.primitive.ulp"
        },
        "2": {
          "name": "storage.type.built-in.primitive.ulp"
        },
        "3": {
          "name": "storage.type.built-in.primitive.ulp"
        },
        "4": {
          "name": "storage.type.built-in.primitive.ulp"
        },
        "5": {
          "name": "storage.type.enum.ulp"
        },
        "6": {
          "name": "storage.type.built-in.primitive.ulp"
        }
      }
    },
    "ul-objects": {
      "match": "\\b(UL_(?:ARC|AREA|ATTRIBUTE|BOARD|BUS|CIRCLE|CLASS|CONTACT|CONTACTREF|DEVICE|DEVICESET|ELEMENT|FRAME|GATE|GRID|HOLE|INSTANCE|JUNCTION|LABEL|LAYER|LIBRARY|NET|PACKAGE|PAD|PART|PIN|PINREF|POLYGON|RECTANGLE|SCHEMATIC|SEGMENT|SHEET|SMD|SIGNAL|SYMBOL|TEXT|VIA|WIRE|))\\b",
      "name": "storage.type.ulp"
    },
    "escapes": {
      "match": "\\\\(?:a|b|f|n|r|t|v|\\|\\'|\\\"|[0-7]{1,3}|x[a-fA-F0-9]{1,2})",
      "name": "constant.character.escape"
    },
    "block-delimiters": {
      "match": "(\\[|\\])|(\\{|\\})|(\\(|\\))",
      "captures": {
        "0": {
          "name": "punctuation"
        },
        "1": {
          "name": "meta.punctuation.bracket.square.ulp"
        },
        "2": {
          "name": "meta.punctuation.bracket.curly.ulp"
        },
        "3": {
          "name": "meta.punctuation.paren.ulp"
        }
      }
    },
    "punctuation": {
      "match": "(\\,)|(\\;)|(\\:)",
      "captures": {
        "0": {
          "name": "punctuation"
        },
        "1": {
          "name": "meta.punctuation.comma.ulp"
        },
        "2": {
          "name": "meta.punctuation.semicolon.ulp"
        },
        "3": {
          "name": "meta.punctuation.colon.ulp"
        },
        "4": {
          "name": "meta.punctuation.equals.ulp"
        }
      }
    },
    "character-constant": {
      "begin": "\\'",
      "end": "\\'",
      "name": "string.quoted.single",
      "patterns": [
        {
          "match": "\\S{1}",
          "name": "string.quoted.single"
        },
        {
          "include": "#escapes"
        },
        {
          "match": "\\\"",
          "name": "string.quoted.double.ulp"
        }
      ]
    },
    "string-constant": {
      "begin": "\\\"",
      "end": "\\\"",
      "name": "string.quoted.double",
      "patterns": [
        {
          "include": "#escapes"
        },
        {
          "match": "\\'",
          "name": "string.quoted.double.ulp"
        },
        {
          "match": "\\S+?",
          "name": "string.quoted.double.ulp"
        }
      ]
    },
    "numeric-constant": {
      "match": "([-+])*\\b(?:(0(?!\\.)(?:[1-7]*))|(0x(?:[a-fA-F0-9]+))|(([\\.0-9]{0,1}[\\.1-9][0-9]*)([e|E][-+]{0,1}[\\.1-9]{0,1}[\\.0-9][0-9]*){0,1}))\\b",
      "captures": {
        "0": {
          "name": "constant.numeric.ulp"
        },
        "1": {
          "name": "constant.numeric.octal.ulp"
        },
        "2": {
          "name": "constant.numeric.hexadecimal.ulp"
        },
        "3": {
          "name": "constant.numeric.real.ulp"
        },
        "4": {
          "name": "constant.numeric.decimal.ulp"
        },
        "5": {
          "name": "constant.numeric.exponent.ulp"
        }
      }
    },
    "directive": {
      "match": "(#(?:include|require|usage))\\s",
      "captures": {
        "0": {
          "name": "meta.directive.ulp"
        },
        "1": {
          "name": "keyword.control.directive"
        }
      }
    },
    "function-def": {
      "name": "entity.name.function",
      "begin": "([_a-zA-Z][_a-zA-Z0-9]*)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function"
        },
        "2": {
          "name": "punctuation.section.parens.begin.bracket.round.ulp"
        }
      },
      "patterns": [
        {
          "include": "#function-def"
        },
        {
          "include": "#primitives"
        },
        {
          "include": "#identifier"
        },
        {
          "include": "#string-constant"
        },
        {
          "include": "#character-constant"
        },
        {
          "include": "#numeric-constant"
        },
        {
          "include": "#operators"
        }
      ],
      "end": "\\)"
    },
    "dialog-object-constructors": {
      "name": "entity.name.function",
      "match": "\\b(dlg(?:Directory|FileOpen|FileSave|MessageBox))\\b",
      "captures": {
        "1": {
          "name": "entity.name.function.constructor.ulp"
        }
      }
    },
    "dialog-objects": {
      "name": "entity.name.class",
      "match": "\\b(dlg(?:Cell|CheckBox|ComboBox|Dialog|GridLayout|Group|HBoxLayout|IntEdit|Label|ListBox|ListView|PushButton|RadioButton|RealEdit|Spacing|SpinBox|Stretch|StringEdit|TabPage|TabWidget|TextEdit|TextView|VBoxLayout))\\b"
    },
    "dialog-functions": {
      "name": "entity.name.function",
      "match": "\\b(dlg(?:Accept|Redisplay|Reset|Reject|SelectionChanged))\\b"
    },
    "operators": {
      "match": "((<<=|>>=|&=|\\|=|\\^=)|(\\!=|<=|>=|<|>|==)|(\\|\\||&&|\\!)|(\\?|:)|(<<|>>|&|\\||\\^|~)|(\\=|\\*=|\\/=|%=|\\+=|\\-=|\\+\\+|\\-\\-|\\+|\\-|\\*|\\/|%))",
      "captures": {
        "0": {
          "name": "keyword.operator"
        },
        "1": {
          "name": "keyword.operator.binary.assignment.ulp"
        },
        "2": {
          "name": "keyword.operator.comparison.ulp"
        },
        "3": {
          "name": "keyword.operator.logical.ulp"
        },
        "4": {
          "name": "keyword.operator.ternary.ulp"
        },
        "5": {
          "name": "keyword.operator.bitwise.ulp"
        },
        "6": {
          "name": "keyword.operator.assignment.ulp"
        }
      }
    }
  }
}
